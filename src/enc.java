import java.awt.EventQueue;

import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.Random;

import javax.swing.JTextField;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class enc {
	private JFrame frame;
	private JTextField textField;
	char[] index_1, index_2, index_3, index_4, index_5, index_6, index_7, index_8, index_9;
	int position;
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					enc window = new enc();
					window.frame.setVisible(true);
					window.frame.setTitle("Encryptioner & Decryptioner - AYS tel\u2122");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	public enc() {
		initialize();
	}

	private void initialize(){
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| UnsupportedLookAndFeelException e) {
			e.printStackTrace();
		}
		
		// set each index key, these were randomly generated by chatGPT to shuffle the alphabet to have 9 random unique keys
		index_1 = new char[] {'H', 'G', 'S', 'K', 'W', 'Y', 'O', 'X', 'P', 'Z', 'E', 'M', 'B', 'U', 'I', 'T', 'N', 'D', 'A', 'J', 'V', 'Q', 'L', 'C', 'F', 'R'};
        index_2 = new char[] {'P', 'U', 'Y', 'D', 'K', 'R', 'T', 'G', 'V', 'N', 'Q', 'O', 'E', 'S', 'X', 'H', 'F', 'A', 'C', 'I', 'M', 'L', 'J', 'B', 'W', 'Z'};
        index_3 = new char[] {'C', 'Y', 'O', 'M', 'N', 'E', 'F', 'H', 'U', 'I', 'V', 'R', 'X', 'G', 'J', 'S', 'L', 'K', 'T', 'Z', 'B', 'Q', 'W', 'D', 'P', 'A'};
        index_4 = new char[] {'T', 'G', 'I', 'W', 'J', 'O', 'F', 'A', 'K', 'R', 'H', 'V', 'N', 'S', 'M', 'D', 'L', 'X', 'E', 'Z', 'U', 'Q', 'P', 'Y', 'B', 'C'};
        index_5 = new char[] {'L', 'C', 'Z', 'P', 'U', 'Y', 'O', 'R', 'M', 'X', 'H', 'T', 'D', 'N', 'E', 'J', 'S', 'W', 'G', 'I', 'V', 'K', 'B', 'A', 'F', 'Q'};
        index_6 = new char[] {'U', 'B', 'Q', 'D', 'I', 'F', 'E', 'V', 'C', 'L', 'N', 'R', 'H', 'G', 'O', 'W', 'Y', 'M', 'S', 'T', 'J', 'Z', 'K', 'X', 'C', 'A'};
        index_7 = new char[] {'K', 'S', 'A', 'X', 'M', 'B', 'F', 'R', 'G', 'J', 'Y', 'P', 'L', 'I', 'D', 'V', 'C', 'Q', 'N', 'U', 'H', 'W', 'E', 'O', 'T', 'W'};
        index_8 = new char[] {'P', 'Y', 'W', 'J', 'S', 'H', 'B', 'O', 'V', 'Z', 'G', 'Q', 'M', 'I', 'N', 'C', 'F', 'X', 'U', 'A', 'R', 'T', 'K', 'E', 'L', 'D'};
        index_9 = new char[] {'F', 'W', 'C', 'U', 'P', 'K', 'R', 'O', 'Y', 'G', 'N', 'S', 'A', 'B', 'X', 'M', 'Z', 'V', 'L', 'D', 'I', 'Q', 'E', 'J', 'T', 'H'};
        
        char[][] indicies = {index_1, index_2, index_3, index_4, index_5, index_6, index_7, index_8, index_9}; // init indicies array with all keys
        
		frame = new JFrame();
		frame.setBounds(100, 100, 700, 415);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JLabel lblNewLabel = new JLabel("Encrypt & Decrypt Messages from AYS tel\u2122");
		lblNewLabel.setFont(new Font("Nirmala UI Semilight", Font.PLAIN, 33));
		lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel.setBounds(0, 10, 686, 51);
		frame.getContentPane().add(lblNewLabel);
		
		JLabel lbl = new JLabel("Enter text to encrypt");
		lbl.setFont(new Font("Nirmala UI", Font.PLAIN, 30));
		lbl.setHorizontalAlignment(SwingConstants.CENTER);
		lbl.setBounds(10, 63, 666, 51);
		frame.getContentPane().add(lbl);
		
		JRadioButton encMode = new JRadioButton("Encryption Mode");
		encMode.setFont(new Font("Tahoma", Font.PLAIN, 20));
		encMode.setSelected(true);
		encMode.setBounds(10, 184, 173, 37);
		encMode.setFocusable(false);
		frame.getContentPane().add(encMode);
		
		JRadioButton decMode = new JRadioButton("Decryption Mode");
		decMode.setFont(new Font("Tahoma", Font.PLAIN, 20));
		decMode.setBounds(10, 223, 187, 37);
		decMode.setFocusable(false);
		frame.getContentPane().add(decMode);
		
		ButtonGroup group = new ButtonGroup();
		group.add(encMode);
		group.add(decMode);
		
		JTextArea result = new JTextArea();
		result.setWrapStyleWord(true);
		result.setFont(new Font("Monospaced", Font.PLAIN, 22));
		result.setLineWrap(true);
		result.setText("Results Here");
		result.setEditable(false);
		result.setBounds(213, 195, 463, 173);
		frame.getContentPane().add(result);
		
		textField = new JTextField();
		textField.setFont(new Font("Tahoma", Font.PLAIN, 20));
		textField.setBounds(20, 117, 656, 61);
		frame.getContentPane().add(textField);
		textField.setColumns(10);
		
		JButton copyBtn = new JButton("Copy");
		copyBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
		        StringSelection selection = new StringSelection(result.getText());
		        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		        clipboard.setContents(selection, null);
			}
		});
		copyBtn.setFont(new Font("Quicksand Medium", Font.PLAIN, 32));
		copyBtn.setBounds(10, 310, 197, 58);
		copyBtn.setFocusable(false);
		frame.getContentPane().add(copyBtn);
		
		JButton clear = new JButton("Clear");
		clear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				result.setText(null);
				textField.setText(null);
			}
		});
		clear.setFont(new Font("Quicksand Medium", Font.PLAIN, 32));
		clear.setFocusable(false);
		clear.setBounds(10, 266, 197, 37);
		frame.getContentPane().add(clear);
		textField.addKeyListener((KeyListener) new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
            	String input = textField.getText().toUpperCase();
            	
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                	if(encMode.isSelected()) { // ENCRYPTION
                		
                		StringBuilder encryptedResult = new StringBuilder("");
                		String[] words = input.split("\\s+");
                		for (String word : words) {
                			StringBuilder encryptedWord = new StringBuilder("");
                			Random rand = new Random();
                    		int randomIndex = rand.nextInt(9);
                    		int turns = rand.nextInt(9) + 1;
                    		
                    		for (char letter : word.toCharArray()) {
                    		    char[] index = indicies[randomIndex];
                    	        for (position = 0; position < index.length; position++) { // find where the letter is in rand index
                    	            if (index[position] == 
                    	            		letter) {
                    	                break; // Exit the loop once the target letter is found
                    	            }
                    	        }
                    	        if(position==index.length) {
                    	        	encryptedWord.append(letter);
                    	        	continue;
                    	        }
                    	        else if(turns+position>=index.length) {
                    	        	letter = index[(turns+position)-26]; // go back to start of array
                    	        }
                    	        else {
                    	        	letter = index[turns+position];
                    	        }
                    	        encryptedWord.append(letter);
                    		}
                    		encryptedWord.insert(0, randomIndex+1);
                    		encryptedWord.append(turns);
                    		encryptedResult.append(encryptedWord + " ");
                		}
                		result.setText(encryptedResult.toString());
                	} 
                	
                	else { // DECRYPTION
                		StringBuilder decryptedResult = new StringBuilder("");
                		String[] words = input.split("\\s+");
                		for (String word: words) {
                			StringBuilder decryptedWord = new StringBuilder("");
                            char turnsInString = word.charAt(word.length() - 1);
                            char indexInString = word.charAt(0);
                            
                    		int chosenIndex = Character.getNumericValue(indexInString)-1; // minus 1 because it will be used using index principle (0 is first)
                            int turns = Character.getNumericValue(turnsInString);
                            
                            StringBuilder wordStringBuilder = new StringBuilder(word);
                            
                            wordStringBuilder.deleteCharAt(0);
                            wordStringBuilder.deleteCharAt(wordStringBuilder.length()-1); // again, minus 1 for index principles
                            word = wordStringBuilder.toString();
                            
                    		for (char letter : word.toCharArray()) {
                    		    char[] index = indicies[chosenIndex];
                    	        for (position = 0; position < index.length; position++) { 
                    	            if (index[position] == letter) {
                    	                break; // Exit the loop once the target letter is found
                    	            }
                    	        }
                    	        if(position==index.length) {
                    	        	decryptedWord.append(letter);
                    	        	continue;
                    	        }
                    	        else if(position-turns<0) {
                    	        	letter = index[(position-turns)+26]; // go back to start of array
                    	        }
                    	        else {
                    	        	letter = index[position-turns];
                    	        }
                    	        decryptedWord.append(letter);
                    		}
                    		decryptedResult.append(decryptedWord + " ");
                		};
                		result.setText(decryptedResult + " ");
                	}
                };
            }
		});
	}
}